[{"name":"abstract val getState: GetState<State>","description":"org.reduxkotlin.Store.getState","location":"redux-kotlin/org.reduxkotlin/-store/get-state.html","searchKeys":["getState","abstract val getState: GetState<State>","org.reduxkotlin.Store.getState"]},{"name":"abstract val replaceReducer: (Reducer<State>) -> Unit","description":"org.reduxkotlin.Store.replaceReducer","location":"redux-kotlin/org.reduxkotlin/-store/replace-reducer.html","searchKeys":["replaceReducer","abstract val replaceReducer: (Reducer<State>) -> Unit","org.reduxkotlin.Store.replaceReducer"]},{"name":"abstract val subscribe: (StoreSubscriber) -> StoreSubscription","description":"org.reduxkotlin.Store.subscribe","location":"redux-kotlin/org.reduxkotlin/-store/subscribe.html","searchKeys":["subscribe","abstract val subscribe: (StoreSubscriber) -> StoreSubscription","org.reduxkotlin.Store.subscribe"]},{"name":"abstract var dispatch: Dispatcher","description":"org.reduxkotlin.Store.dispatch","location":"redux-kotlin/org.reduxkotlin/-store/dispatch.html","searchKeys":["dispatch","abstract var dispatch: Dispatcher","org.reduxkotlin.Store.dispatch"]},{"name":"const val UNKNOWN_THREAD_NAME: String","description":"org.reduxkotlin.utils.UNKNOWN_THREAD_NAME","location":"redux-kotlin/org.reduxkotlin.utils/-u-n-k-n-o-w-n_-t-h-r-e-a-d_-n-a-m-e.html","searchKeys":["UNKNOWN_THREAD_NAME","const val UNKNOWN_THREAD_NAME: String","org.reduxkotlin.utils.UNKNOWN_THREAD_NAME"]},{"name":"expect fun getThreadName(): String","description":"org.reduxkotlin.utils.getThreadName","location":"redux-kotlin/org.reduxkotlin.utils/get-thread-name.html","searchKeys":["getThreadName","expect fun getThreadName(): String","org.reduxkotlin.utils.getThreadName"]},{"name":"fun <State> applyMiddleware(vararg middlewares: Middleware<State>): StoreEnhancer<State>","description":"org.reduxkotlin.applyMiddleware","location":"redux-kotlin/org.reduxkotlin/apply-middleware.html","searchKeys":["applyMiddleware","fun <State> applyMiddleware(vararg middlewares: Middleware<State>): StoreEnhancer<State>","org.reduxkotlin.applyMiddleware"]},{"name":"fun <State> combineReducers(vararg reducers: Reducer<State>): Reducer<State>","description":"org.reduxkotlin.combineReducers","location":"redux-kotlin/org.reduxkotlin/combine-reducers.html","searchKeys":["combineReducers","fun <State> combineReducers(vararg reducers: Reducer<State>): Reducer<State>","org.reduxkotlin.combineReducers"]},{"name":"fun <State> createSameThreadEnforcedStore(reducer: Reducer<State>, preloadedState: State, enhancer: StoreEnhancer<State>? = null): Store<State>","description":"org.reduxkotlin.createSameThreadEnforcedStore","location":"redux-kotlin/org.reduxkotlin/create-same-thread-enforced-store.html","searchKeys":["createSameThreadEnforcedStore","fun <State> createSameThreadEnforcedStore(reducer: Reducer<State>, preloadedState: State, enhancer: StoreEnhancer<State>? = null): Store<State>","org.reduxkotlin.createSameThreadEnforcedStore"]},{"name":"fun <State> createStore(reducer: Reducer<State>, preloadedState: State, enhancer: StoreEnhancer<State>? = null): Store<State>","description":"org.reduxkotlin.createStore","location":"redux-kotlin/org.reduxkotlin/create-store.html","searchKeys":["createStore","fun <State> createStore(reducer: Reducer<State>, preloadedState: State, enhancer: StoreEnhancer<State>? = null): Store<State>","org.reduxkotlin.createStore"]},{"name":"fun <State> middleware(dispatch: (Store<State>, Dispatcher, action: Any) -> Any): Middleware<State>","description":"org.reduxkotlin.middleware","location":"redux-kotlin/org.reduxkotlin/middleware.html","searchKeys":["middleware","fun <State> middleware(dispatch: (Store<State>, Dispatcher, action: Any) -> Any): Middleware<State>","org.reduxkotlin.middleware"]},{"name":"fun <T> compose(functions: List<(T) -> T>): (T) -> T","description":"org.reduxkotlin.compose","location":"redux-kotlin/org.reduxkotlin/compose.html","searchKeys":["compose","fun <T> compose(functions: List<(T) -> T>): (T) -> T","org.reduxkotlin.compose"]},{"name":"fun <T> compose(vararg functions: (T) -> T): (T) -> T","description":"org.reduxkotlin.compose","location":"redux-kotlin/org.reduxkotlin/compose.html","searchKeys":["compose","fun <T> compose(vararg functions: (T) -> T): (T) -> T","org.reduxkotlin.compose"]},{"name":"fun isPlainObject(obj: Any): Boolean","description":"org.reduxkotlin.utils.isPlainObject","location":"redux-kotlin/org.reduxkotlin.utils/is-plain-object.html","searchKeys":["isPlainObject","fun isPlainObject(obj: Any): Boolean","org.reduxkotlin.utils.isPlainObject"]},{"name":"fun stripCoroutineName(threadName: String): String","description":"org.reduxkotlin.utils.stripCoroutineName","location":"redux-kotlin/org.reduxkotlin.utils/strip-coroutine-name.html","searchKeys":["stripCoroutineName","fun stripCoroutineName(threadName: String): String","org.reduxkotlin.utils.stripCoroutineName"]},{"name":"inline fun <TState, TAction> reducerForActionType(crossinline reducer: ReducerForActionType<TState, TAction>): Reducer<TState>","description":"org.reduxkotlin.reducerForActionType","location":"redux-kotlin/org.reduxkotlin/reducer-for-action-type.html","searchKeys":["reducerForActionType","inline fun <TState, TAction> reducerForActionType(crossinline reducer: ReducerForActionType<TState, TAction>): Reducer<TState>","org.reduxkotlin.reducerForActionType"]},{"name":"interface Store<State>","description":"org.reduxkotlin.Store","location":"redux-kotlin/org.reduxkotlin/-store/index.html","searchKeys":["Store","interface Store<State>","org.reduxkotlin.Store"]},{"name":"object ActionTypes","description":"org.reduxkotlin.ActionTypes","location":"redux-kotlin/org.reduxkotlin/-action-types/index.html","searchKeys":["ActionTypes","object ActionTypes","org.reduxkotlin.ActionTypes"]},{"name":"object INIT","description":"org.reduxkotlin.ActionTypes.INIT","location":"redux-kotlin/org.reduxkotlin/-action-types/-i-n-i-t/index.html","searchKeys":["INIT","object INIT","org.reduxkotlin.ActionTypes.INIT"]},{"name":"object REPLACE","description":"org.reduxkotlin.ActionTypes.REPLACE","location":"redux-kotlin/org.reduxkotlin/-action-types/-r-e-p-l-a-c-e/index.html","searchKeys":["REPLACE","object REPLACE","org.reduxkotlin.ActionTypes.REPLACE"]},{"name":"open val state: State","description":"org.reduxkotlin.Store.state","location":"redux-kotlin/org.reduxkotlin/-store/state.html","searchKeys":["state","open val state: State","org.reduxkotlin.Store.state"]},{"name":"operator fun <State> Reducer<State>.plus(other: Reducer<State>): Reducer<State>","description":"org.reduxkotlin.plus","location":"redux-kotlin/org.reduxkotlin/plus.html","searchKeys":["plus","operator fun <State> Reducer<State>.plus(other: Reducer<State>): Reducer<State>","org.reduxkotlin.plus"]}]
