apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'org.jetbrains.dokka'

dokkaHtml {
    outputDirectory.set(file("./dokka"))

    dokkaSourceSets {
        configureEach {
            displayName.set(it.name)
            perPackageOption {
                matchingRegex.set("org\\.reduxkotlin")
                skipDeprecated.set(false)
                reportUndocumented.set(true)
                includeNonPublic.set(false)
                suppress.set(false)
            }
            perPackageOption {
                matchingRegex.set(".*\\.internal.*")
                suppress.set(true)
            }
        }
    }
}

def isReleaseBuild() {
    return version.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL :
            "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL :
            "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return findProperty('SONATYPE_NEXUS_USERNAME') ?: System.getenv('SONATYPE_NEXUS_USERNAME') ?: ""
}

def getRepositoryPassword() {
    return findProperty('SONATYPE_NEXUS_PASSWORD') ?: System.getenv('SONATYPE_NEXUS_PASSWORD') ?: ""
}

task emptySourcesJar(type: Jar) {
    classifier = 'sources'
}

task javadocsJar(type: Jar, dependsOn: dokkaHtml) {
    classifier = 'javadoc'
    from dokkaHtml.outputDirectory
}

signing {
    required { isReleaseBuild() /*&& gradle.taskGraph.hasTask("uploadArchives") */ }
//    def signingKey = findProperty("GPG_SECRET") ?: System.getenv('GPG_SECRET') ?: ""
//    def signingPassword = findProperty("GPG_SIGNING_PASSWORD") ?: System.getenv('GPG_SIGNING_PASSWORD') ?: ""
//    useInMemoryPgpKeys(signingKey, signingPassword)
//    sign(publishing.publications)
}

publishing {
    publications.all {
        artifact javadocsJar

        pom.withXml {
            def root = asNode()

            root.children().last() + {
                resolveStrategy = Closure.DELEGATE_FIRST

                description POM_DESCRIPTION
                name POM_NAME
                url POM_URL
                licenses {
                    license {
                        name POM_LICENCE_NAME
                        url POM_LICENCE_URL
                        distribution POM_LICENCE_DIST
                    }
                }
                scm {
                    url POM_SCM_URL
                    connection POM_SCM_CONNECTION
                    developerConnection POM_SCM_DEV_CONNECTION
                }
                developers {
                    developer {
                        id POM_DEVELOPER_ID
                        name POM_DEVELOPER_NAME
                    }
                }
            }
        }
    }

    repositories {
        maven {
            url isReleaseBuild() ? getReleaseRepositoryUrl() : getSnapshotRepositoryUrl()
            credentials {
                username getRepositoryUsername()
                password getRepositoryPassword()
            }
        }
        maven {
            name 'test'
            url "file://${rootProject.buildDir}/localMaven"
        }
    }
}
